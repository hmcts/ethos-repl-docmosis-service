#!groovy

properties([
        pipelineTriggers([cron('00 6 * * *')]),
        parameters([
                string(name: 'ENVIRONMENT', defaultValue: 'aat', description: 'Environment to test'),
                string(name: 'ExUI_URL_TO_TEST', defaultValue: 'https://manage-case.aat.platform.hmcts.net', description: 'The ExUI Url you want to run ECM end to end tests'),
                string(name: 'IDAM_API_URL', defaultValue: 'https://idam-api.aat.platform.hmcts.net', description: 'The Url of IDAM Api'),
                string(name: 'S2S_PROVIDER_URL', defaultValue: 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal', description: 'The Url of S2S provider Api'),
                string(name: 'CCD_DATA_STORE_URL', defaultValue: 'http://ccd-data-store-api-aat.service.core-compute-aat.internal', description: 'The Url of ccd data store Api'),
                string(name: 'SecurityRules',
                        defaultValue: 'https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
                        description: 'The URL you want to run these tests against'),
        ])
])

@Library("Infrastructure")

def type = "java"
def product = "ethos"
def component = "repl-docmosis-backend"

def vaultOverrides = [
        'aat' : params.ENVIRONMENT,
]

def secrets = [
        "ethos-shared-${params.ENVIRONMENT}": [
                secret('ccd-user-email', 'CCD_CASEWORKER_E2E_EMAIL'),
                secret('ccd-user-password', 'CCD_CASEWORKER_E2E_PASSWORD'),
                secret('ethos-repl-service-s2s-secret', 'SERVICE_SECRET'),
                secret('ecm-idam-client-secret', 'IDAM_CLIENT_SECRET')
        ],
        's2s-${env}':  [
                secret('microservicekey-ccd-gw', 'MICROSERVICE_CCD_GW')
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

withNightlyPipeline(type, product, component) {

    env.TEST_E2E_URL = params.ExUI_URL_TO_TEST
    env.IDAM_URL = params.IDAM_API_URL
    env.S2S_PROVIDER = params.S2S_PROVIDER_URL
    env.CCD_DATA_STORE_API_URL = params.CCD_DATA_STORE_URL
    env.RUNNING_ENV = params.ENVIRONMENT
    overrideVaultEnvironments(vaultOverrides)
    loadVaultSecrets(secrets)
    enableFullFunctionalTest()
    enableCrossBrowserTest()
    enableFortifyScan('ethos-shared-aat')

    afterSuccess('fullFunctionalTest') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'

        publishHTML target: [
                allowMissing : true,
                alwaysLinkToLastBuild: true,
                keepAll : true,
                reportDir : "functional-output",
                reportFiles : "ecm-e2e-result.html",
                reportName : "ECM E2E tests result"
        ]
    }

    afterSuccess('fortify-scan') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
    }

}
