plugins {
    id 'application'
    id 'java'
    id 'jacoco'
//    id 'checkstyle'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.springframework.boot' version '2.3.9.RELEASE'
    id 'org.owasp.dependencycheck' version '6.1.2'
    id 'net.ltgt.apt' version '0.10'
    id 'org.owasp.dependencycheck' version '6.0.1'
    id 'uk.gov.hmcts.java' version '0.12.5'
    id 'au.com.dius.pact' version '4.1.0'
    id 'io.freefair.lombok' version '5.3.0'
    id 'com.github.ben-manes.versions' version '0.36.0'
    id 'org.sonarqube' version '3.1.1'
}

group = 'uk.gov.hmcts.ethos.replacement'
version = '0.0.1'

//checkstyle {
//    maxWarnings = 0
//
//    toolVersion = '8.29'
//    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
//    configDir = new File(rootDir, 'config/checkstyle')
//}

allprojects {
    sourceCompatibility = '11.0'
    targetCompatibility = '11.0'
}

jacocoTestReport {
    executionData(test)
    reports {
        xml.enabled = true
        csv.enabled = false
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.0
            }
        }
    }
}

def sonarExclusions = ['**/uk/gov/hmcts/ethos/replacement/docmosis/config/**',
                       '**/uk/gov/hmcts/ethos/replacement/docmosis/model/**',
                       '**/uk/gov/hmcts/reform/ethos/replacement/docmosis/CaseOrchestrationApplication'
]

sonarqube {
    properties {
        property "sonar.exclusions", sonarExclusions.join(', ')
        property "sonar.projectKey", "ethos-repl-docmosis-service"
        property "sonar.dynamicAnalysis", "reuseReports"
        property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
    }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sourceSets {
    test {
        java.srcDir 'src/test/java'
    }
    functional {
        java.srcDir 'src/test/functional/java'
        resources.srcDir 'src/test/functional/resources'
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
    contractTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            java.srcDir 'src/contractTest/java'
            resources.srcDir 'src/contractTest/resources'
        }
        resources.srcDir file('src/contractTest/resources')
    }
}

configurations {
    functionalCompile.extendsFrom testCompile
    functionalRuntime.extendsFrom testRuntime
    contractTestCompile.extendsFrom testCompile
    contractTestRuntime.extendsFrom testRuntime
}

test {
    useJUnitPlatform()
    exclude '**/*ComponentTest*'
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
    testClassesDirs = sourceSets.functional.output.classesDirs
    classpath = sourceSets.functional.runtimeClasspath

    useJUnit {
        includeCategories 'uk.gov.hmcts.ethos.replacement.functional.SmokeTest'
    }
    systemProperty('VAULTNAME', System.getenv('VAULTNAME'))
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
    testClassesDirs = sourceSets.functional.output.classesDirs
    classpath = sourceSets.functional.runtimeClasspath

    useJUnit {
        includeCategories 'uk.gov.hmcts.ethos.replacement.functional.SmokeTest'
    }

    systemProperty('VAULTNAME', System.getenv('VAULTNAME'))

    maxHeapSize = '1G'
}

project.ext {
    pacticipant = 'ethos_replDocmosisService'
    pacticipantVersion = getCheckedOutGitCommitHash()
}

def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

task runContractTests(type: Test, description: 'Runs contract tests.', group: 'Verification') {
    onlyIf {
        return System.env.SKIP_CONTRACT_TESTS == null || System.env.SKIP_CONTRACT_TESTS == 'false'
    }
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    systemProperty 'pact.rootDir', "pacts"
    testLogging.showStandardStreams = true

}

task runAndPublishConsumerPactTests(type: Test, description: 'Publish pact test to broker.', group: 'Verification') {
    logger.lifecycle("Runs pact consumer Tests")
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
}

runAndPublishConsumerPactTests.finalizedBy pactPublish

pact {
    broker {
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
    }
    publish {
        pactDirectory = 'pacts'
        tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
        version = project.pacticipantVersion
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
    maven { url "http://repo.maven.apache.org/maven2" }
    maven { url 'https://repo.spring.io/libs-milestone' }
}

def versions = [
        springfoxSwagger: '2.9.2',
        logging: '5.1.7',
        pact_version    : '4.1.7',
        serenity        : '2.3.31'
]

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-configuration-processor'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.retry:spring-retry'

    compile 'org.postgresql:postgresql:42.2.2'

    compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger
    compile group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '9.7'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.12'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '2.2.5.RELEASE'
    compile group: 'io.github.openfeign', name: 'feign-httpclient', version: '11.1'
    compile group: 'io.github.openfeign', name: 'feign-core', version: '11.1'

    compile group: 'uk.gov.hmcts.reform', name: 'ecm-common', version: '0.1.54'
    compile group: 'uk.gov.hmcts.reform', name: 'document-management-client', version: '6.0.0'
    compile group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.logging
    compile group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.logging
    compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version:'0.1.0'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'


    testCompile 'org.springframework.boot:spring-boot-starter-test'

    testCompile (group: 'org.docx4j', name: 'docx4j', version: '6.1.2') {
        exclude module: 'slf4j-log4j12'
    }
    testCompile group: 'com.auth0', name: 'java-jwt', version: '3.14.0'
    testCompile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
    testCompile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    testCompile group: 'com.warrenstrange', name: 'googleauth', version: '1.5.0'

    testCompile group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    testCompile group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity, {
        exclude module: 'jaxb-osgi'
    }

    testCompile group: 'net.serenity-bdd', name: 'serenity-junit', version: '2.3.6'
    testCompile group: 'net.serenity-bdd', name: 'serenity-spring', version: '2.3.6'

    contractTestCompile group: 'uk.gov.hmcts.reform', name: 'ecm-common', version: '0.1.44'
    contractTestCompile group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
    contractTestCompile group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version
    contractTestCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.3.9.RELEASE'
    contractTestCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit_jupiter
    contractTestRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit_jupiter
    contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit_jupiter
    contractTestRuntime group: 'org.junit.platform', name: 'junit-platform-commons', version: '1.7.0'
    contractTestImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.4'
    contractTestCompile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.4'
    contractTestImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '2.2.7.RELEASE'
    contractTestImplementation group: 'org.springframework.cloud', name: 'spring-cloud-netflix-ribbon', version: '2.2.7.RELEASE'

    contractTestImplementation sourceSets.main.runtimeClasspath
    contractTestImplementation sourceSets.test.runtimeClasspath
    testCompile group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
    testCompile group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
}

bootJar {
    getArchiveFileName().set(provider {
        'ethos-repl-docmosis-service.jar'
    })

    manifest {
        attributes('Implementation-Version': project.version.toString())
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
