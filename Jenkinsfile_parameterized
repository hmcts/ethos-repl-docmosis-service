#!groovy
@Library(value="Infrastructure", changelog=false) _

def secrets = [
  'ethos-${env}': [
    secret('AppInsightsInstrumentationKey', 'APPINSIGHTS_INSTRUMENTATIONKEY'),
    secret('tornado-access-key', 'TORNADO_ACCESS_KEY')
  ],
  's2s-${env}' : [
    secret('ethos-repl-service-s2s-secret', 'ETHOS_S2S_SECRET_KEY')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

properties([
  parameters([
    string(name: 'PRODUCT_NAME', defaultValue: 'ethos', description: ''),
    string(name: 'APP', defaultValue: 'repl-docmosis-backend', description: ''),
    string(name: 'TYPE', defaultValue: 'java', description: ''),
    string(name: 'ENVIRONMENT', defaultValue: 'sandbox', description: 'Environment where code should be build and deployed'),
    choice(name: 'SUBSCRIPTION', choices: 'sandbox\nnonprod\nprod\nhmctsdemo', description: 'Azure subscriptions available to build in')
  ]),
  [$class: 'GithubProjectProperty', projectUrlStr: 'github.com/hmcts/ethos-repl-docmosis-service'],
  pipelineTriggers([[$class: 'GitHubPushTrigger']])
])

withParameterizedPipeline(params.TYPE, params.PRODUCT_NAME, params.APP, params.ENVIRONMENT, params.SUBSCRIPTION) {
    loadVaultSecrets(secrets)
    enableSlackNotifications('#ethos-repl-service')

    after('functional:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('functional:demo') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('functional:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }
}